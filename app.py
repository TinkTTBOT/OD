import streamlit as st
from PIL import Image
import torch
import open_clip

# --- T·∫£i model ---
@st.cache_resource
def load_model():
    model, _, preprocess = open_clip.create_model_and_transforms('ViT-B-32', pretrained='openai')
    tokenizer = open_clip.get_tokenizer('ViT-B-32')
    return model, preprocess, tokenizer

model, preprocess, tokenizer = load_model()

# --- Danh s√°ch nh√£n ---
labels = [
    "SUV", "Sedan", "Truck", "Van", "Bus", "Pickup Truck",
    "Hatchback", "Minivan", "Wagon", "Coupe", "Convertible"
]

st.title("üöó Ph√¢n lo·∫°i xe b·∫±ng AI (CLIP)")
st.write("T·∫£i l√™n ho·∫∑c d√°n ·∫£nh xe ƒë·ªÉ h·ªá th·ªëng x√°c ƒë·ªãnh lo·∫°i xe ch√≠nh x√°c nh·∫•t.")

# --- Upload ho·∫∑c d√°n ·∫£nh ---
uploaded_file = st.file_uploader("üìÅ Ch·ªçn ·∫£nh xe", type=["png", "jpg", "jpeg"])
image = None

if uploaded_file:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_column_width=True)
else:
    st.info("üëâ H√£y t·∫£i ·∫£nh xe ho·∫∑c d√°n ·∫£nh v√†o ƒë√¢y.")

# --- N√∫t ph√¢n lo·∫°i ---
if st.button("üîç Ph√¢n lo·∫°i"):
    if image is not None:
        with st.spinner("‚è≥ ƒêang ph√¢n t√≠ch ·∫£nh..."):
            image_input = preprocess(image).unsqueeze(0)

            text_inputs = tokenizer([f"a photo of a {label}" for label in labels])
            with torch.no_grad():
                image_features = model.encode_image(image_input)
                text_features = model.encode_text(text_inputs)

                # Chu·∫©n h√≥a vector
                image_features /= image_features.norm(dim=-1, keepdim=True)
                text_features /= text_features.norm(dim=-1, keepdim=True)

                # T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng
                probs = (100.0 * image_features @ text_features.T).softmax(dim=-1)
                probs = probs[0].tolist()

            # --- K·∫øt qu·∫£ ch√≠nh ---
            top_idx = torch.argmax(torch.tensor(probs)).item()
            top_label = labels[top_idx]
            top_prob = probs[top_idx] * 100

        st.success(f"‚úÖ **K·∫øt qu·∫£:** {top_label} ({top_prob:.2f}%)")
    else:
        st.warning("‚ö†Ô∏è B·∫°n c·∫ßn ch·ªçn ·∫£nh tr∆∞·ªõc khi ph√¢n lo·∫°i.")

